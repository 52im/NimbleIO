--可增长的线程池
--client优化
--事务
--心跳
--优化Endpoint
--session 添加销毁监听
--使用maven
--session 添加attachment
--decode改进
--清理session时清理consumer,更新session中的consumer
--增加session管理严谨
--改进SessionFactory
--使用LockSupport
--topic的订阅与推送
--一个connection支持多个Session
--热部署咋办
--增加filter拦截service name
--如果出现加载失败的servlet或者filter则启动失败，来配合热部署
--读取数据任务放到mainSelector
--读到数据后去用session去call somebody 
--byteMessage 支持 text
--改进LinkedList参考ArrayBlockingQueue
--判断某个Consumer是否在线
--对write操作进行优化,
--session.disconnect()

stream acceptor 是否把写入文件的操作放到单独的线程。
加入room机制（RTP or WebSocket）




为什么选用NIO
	NIO相较于BIO对多并发且活动的长连接具有更良好的支持性。
NimbleIO是开源的吗
	是完全开源的，但不建议商用，因为它真的不稳定；目前还是以提供热爱技术的同学共同研究学习使用为主。

	
暂时还不清楚为什么要发送心跳包，但是目前实现连这样的心跳包，当客户端设置成维持长连接时（这里要说一下为什么要设置成长连接，我知道的有
两种情况，一是因为连接创建连接太耗时，频繁的创建关闭连接太耗费资源了；二是服务端推送模式时，客户端不知道服务端什么时候发消息过来，
所以要保持和服务端时刻处于连接中的状态，这两种情况中的第一种是不需要心跳包的，以下所说的情况均是针对于第二种情况），会产生一个task
在一定间隔时间向服务器心跳包，服务端不用回复，为什么不用回复呢，因为这个时候客户端在等待服务端回复的业务消息，没有两个线程收一个消息
的道理吧，其实也不需要服务端往客户端回复，因为如果没有业务消息需要给客户端的话，断了就断了，如果有消息需要传给客户端的话，服务端
会发现噢原来连接断开了，现在需要做的是一定要让客户端知道自己和服务端还连接着，这样可以确保自己能够收到服务端发来的消息。